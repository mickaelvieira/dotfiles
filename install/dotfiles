#!/bin/bash

set -e -u -o pipefail
# set -x

info() {
    echo -e "\x1b[32m\xE2\x87\x92 $1\x1b[0m"
}

error() {
    echo -e "\x1b[97m\x1b[41m\x21\x1b[0m \x1b[31m$1\x1b[0m" 1>&2
    exit 1
}

warning() {
    echo -e "\x1b[97m\x1b[45m\x21\x1b[0m $1"
}

declare -r HOME_DIR=${HOME:-}
declare -r DF_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")/.." && pwd -P)"

create_symlink() {
    local target="$1"
    local symlink="$2"
    local backup="${symlink}.orig"

    if [[ ( -f $symlink && ! -L $symlink ) || -d $symlink ]]; then
        info "Moving existing location ${symlink} to ${backup}"
        mv "${symlink}" "${backup}"
    fi

    if [[ ! -f $target && ! -d $target ]]; then
        error "Target ${target} is neither a file nor a directory"
        exit 1
    fi

    info "Creating symlink ${symlink}"
    ln -svf "${target}" "${symlink}"
}

ask_confirm() {
    local answer=
    local name="$1"

    read -epr "$(echo -e "Do you want to install \x1b[33m${name}\x1b[0m configuration? [Y/n]:") " answer

    [[ -z $answer ]] && answer="y"

    echo $answer
}

install_bash() {
    local files=(
        .bashrc
        .bash_prompt
        .bash_options
        .bash_export
        .bash_profile
        .bash_aliases
        .bash_functions
        .bash_logout
        .dircolors
        .profile
    )

    for file in ${files[*]}; do
        create_symlink "${DF_DIR}/bash/$file" "${HOME_DIR}/$file"
    done

    source ~/.bashrc
}

install_git() {
    if [[ ! -f "${HOME_DIR}/git-prompt.sh" ]]; then
        info "Fetching git-prompt.sh"
        curl -s https://raw.githubusercontent.com/git/git/master/contrib/completion/git-prompt.sh \
            -o "${HOME_DIR}/git-prompt.sh"
    fi

    local files=(
        .gitconfig
        .gitignore
        .gitmessage
        .gitattributes
    )

    for file in ${files[*]}; do
        create_symlink "${DF_DIR}/git/$file" "${HOME_DIR}/$file"
    done
}

install_vim() {
    create_symlink "${DF_DIR}/vim/.vim" "${HOME_DIR}/.vim"
    create_symlink "${DF_DIR}/vim/.vimrc" "${HOME_DIR}/.vimrc"

    info "Fetching instant-markdown.vim "
    curl -s https://raw.githubusercontent.com/suan/vim-instant-markdown/master/after/ftplugin/markdown/instant-markdown.vim \
        -o "${HOME_DIR}/.vim/after/ftplugin/markdown/instant-markdown.vim"

    info "Fetching plug.vim"
    curl -s https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim \
        -o "${HOME_DIR}/.vim/autoload/plug.vim"

    warning "Don't forget to run PlugInstall!"
}

install_tmux() {
    create_symlink "${DF_DIR}/tmux/.tmux.conf" "${HOME_DIR}/.tmux.conf"
}

install_mysql() {
    create_symlink "${DF_DIR}/mysql/.my.cnf" "${HOME_DIR}/.my.cnf"
    create_symlink "${DF_DIR}/grc/.grcat" "${HOME_DIR}/.grcat"
    warning "Don't forget to install grc 'sudo apt-get install -y grc'"
}

install_terminator() {
    [[ ! -d "${HOME_DIR}/.config/terminator" ]] && mkdir -p "${HOME_DIR}/.config/terminator"
    create_symlink "${DF_DIR}/terminator/config" "${HOME_DIR}/.config/terminator/config"
}

install_atom() {
    create_symlink "${DF_DIR}/atom" "${HOME_DIR}/.atom"
}

install_all_with_confirmation() {
    [[ $(ask_confirm "bash" ) == "y" ]] && install_bash
    [[ $(ask_confirm "git") == "y" ]] && install_git
    [[ $(ask_confirm "vim") == "y" ]] && install_vim
    [[ $(ask_confirm "tmux") == "y" ]] && install_tmux
    [[ $(ask_confirm "MySQL") == "y" ]] && install_mysql
    [[ $(ask_confirm "Terminator") == "y" ]] && install_terminator
    [[ $(ask_confirm "Atom") == "y" ]] && install_atom
}

get_choices() {
    cat <<eom
Which configuration do you want to install? (All):
1) All
2) Bash
3) Vim
4) Git
5) Tmux
6) Terminator
7) MySQL
8) Atom
>
eom
}

main() {
    if [[ -z $HOME_DIR ]]; then
        error "HOME directory cannot be an empty string"
        exit 1
    fi

    local choice=
    read -r -ep "$(get_choices) " choice

    [[ -z $choice ]] && choice=1

    case $choice in
        1) install_all_with_confirmation;;
        2) install_bash;;
        3) install_vim;;
        4) install_git;;
        5) install_tmux;;
        6) install_terminator;;
        7) install_mysql;;
        8) install_atom;;
        *) error "Wrong configuration number";;
    esac
}

main
