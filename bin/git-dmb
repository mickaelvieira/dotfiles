#!/bin/bash

# This script will delete locally all merged branches
# It will ignores branches such master, dev, staging, etc...

set -o nounset
set -o errexit
set -o pipefail
#set -x

declare -r RESET_ALL="\x1b[0m"
declare -r BG_RED="\x1b[41m"
declare -r BG_BLUE="\x1b[44m"
declare -r BG_MAGENTA="\x1b[45m"
declare -r FG_WHITE="\x1b[97m"
declare -r FG_RED="\x1b[31m"
declare -r FG_BLUE="\x1b[34m"
declare -r FG_MAGENTA="\x1b[35m"

error() {
    echo -e "${BG_RED}${FG_WHITE}ERROR${RESET_ALL}  ${FG_RED}$1${RESET_ALL}" >&2
}
info() {
    echo -e "${BG_BLUE}${FG_WHITE}INFO${RESET_ALL}  ${FG_BLUE}$1${RESET_ALL}"
}
warning() {
    echo -e "${BG_MAGENTA}${FG_WHITE}WARNING${RESET_ALL}  ${FG_MAGENTA}$1${RESET_ALL}"
}

info "Working directory: $(pwd -P)"

declare -r branches=($(git branch --merged | grep -v "\*" | grep -v master | grep -v dev | grep -v stage | grep -v staging))

if [[ ${#branches[@]} -eq 0 ]];
then
    info "No branches to delete!"
else

    info "The following branches will be deleted locally:"

    for branch in ${branches[@]}
    do
        echo -e "\t- ${branch}"
    done

    read -e -p "Do you want to proceed? [y/N]: " answer

    if [[ ${answer} == "y" ]]; then

        for branch in ${branches[@]}
        do
            warning "Deleting branch: ${branch}"
            git branch -d "${branch}"
        done

    else
        info "Skipped!"
    fi
fi

exit 0

