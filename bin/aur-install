#!/bin/bash

set -e -u -o pipefail
# set -x

declare -r script=$(basename "$0")

msg() {
    echo -e "\\x1b[1;33m==>\\x1b[39m $1\\x1b[0m"
}

error() {
    echo -e "\\x1b[1;97m\\x1b[41m\\x21\\x1b[0m \\x1b[31m$1\\x1b[0m" 1>&2
    exit 1
}

read_help() {
    cat <<eom
${script}

A simple utility to install AUR packages.

Usage: ${script} <repository-url>

The script will the environment variable \$AUR_PKG
to determine the directory where to clone the repository.

Running the script will clone the reposition
and install the corresponding package.
eom
}

get_confirmation_message() {
    local name=$1
    local url=$2

    cat <<EOM
You are about to install the following package:
- Name: \\x1b[33m${name}\\x1b[0m
- URL: \\x1b[33m${url}\\x1b[0m
Do you want to proceed [y/N]:
EOM
}

show_usage() {
    echo -e "$(read_help)" 1>&2
    exit 1
}

install_aur_package() {
    local url="${1}"
    local name=$(basename "$url" .git)
    local message=$(get_confirmation_message "$name" "$url")

    cd "$AUR_PKG" || error "Cannot enter directory '$AUR_PKG'"

    msg "Working directory \\x1b[33m$(pwd)\\x1b[39m"

    read -erp "$(echo -e "$message")" answer

    if [[ "$answer" = y ]]; then
        git clone "${url}"

        cd "./${name}" || error "Cannot enter directory '${name}'"

        makepkg --syncdeps --install --rmdeps --clean
    else
        msg "The package \\x1b[33m${name}\\x1b[39m was not installed"
    fi
}

main() {
    if [[ $EUID -eq 0 ]]; then
        error "This script must NOT be run as root"
    fi

    local -r url="${1:-}"

    if [[ "$url" == http* ]]; then
        install_aur_package "${url}"
    else
        show_usage
    fi
}

main "$@"
