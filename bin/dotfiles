#!/bin/bash
# shellcheck disable=SC2155
# shellcheck disable=SC1090

set -e -u -o pipefail
# set -x

declare -r SCRIPT=$(basename "$0")
declare -r HOME_DIR=${HOME:-}
declare -r ROOT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")/.." && pwd -P)"
declare -r PLATFORM=$(uname)

read_help() {
  cat <<eom
This script helps me move into a new environment.

$(highlight Usage):
  ${SCRIPT} [command]

$(highlight Commands):
- install:    install configuration files
- check:      list of available services
- help:       show this help

$(highlight Examples):
  ${SCRIPT} install               (install configuration files)
  ${SCRIPT} check                 (check dependencies)
eom
}

usage() {
  echo -e "\\n$(read_help)\\n" 1>&2
  exit 0
}

highlight() {
  echo -e "\\x1b[33m$1\\x1b[0m"
}

info() {
  echo -e "\\x1b[1;33m==>\\x1b[39m $1\\x1b[0m"
}

fatal() {
  echo -e "\\x1b[97m\\x1b[41m\\x21\\x1b[0m \\x1b[31m$1\\x1b[0m" 1>&2
  exit 1
}

warn() {
  echo -e "\\x1b[1;95m==>\\x1b[39m $1\\x1b[0m" 1>&2
}

is_installed() {
  command -v "$1" >/dev/null 2>&1
}

get_install_command() {
  local cmd=""

  if is_installed apt; then
    cmd="apt install"
  elif is_installed pacman; then
    cmd="pacman -S"
  elif is_installed apt-get; then
    cmd="apt-get install"
  elif is_installed brew; then
    cmd="brew install"
  fi

  echo "$cmd"
}

create_symlink() {
  local target="$1"
  local symlink="$2"
  local backup="${symlink}.orig"

  if [[ (-f $symlink && ! -L $symlink) || -d $symlink ]]; then
    info "moving existing location $symlink to $backup"
    mv "$symlink" "$backup"
  fi

  if [[ ! -f $target && ! -d $target ]]; then
    fatal "target $target is neither a file nor a directory"
  fi

  info "creating symlink $symlink"
  ln -svf "$target" "$symlink"
}

ask_confirm() {
  local answer=
  local name="$1"

  read -epr "$(echo -e "Do you want to install $(highlight "$name") configuration? [Y/n]:") " answer

  [[ -z $answer ]] && answer="y"

  echo $answer
}

install_bash() {
  local files=(
    .bashrc
    .bash_prompt
    .bash_options
    .bash_export
    .bash_profile
    .bash_aliases
    .bash_functions
    .bash_logout
    .dircolors
    .profile
  )

  for file in ${files[*]}; do
    create_symlink "$ROOT_DIR/bash/$file" "$HOME_DIR/$file"
  done

  source ~/.bashrc
}

install_git() {
  local files=(
    .gitconfig
    .gitignore
    .gitmessage
    .gitattributes
  )

  for file in ${files[*]}; do
    create_symlink "$ROOT_DIR/git/$file" "$HOME_DIR/$file"
  done
}

install_vim() {
  create_symlink "$ROOT_DIR/vim/.vim" "$HOME_DIR/.vim"
  create_symlink "$ROOT_DIR/vim/.vimrc" "$HOME_DIR/.vimrc"

  info "Fetching instant-markdown.vim "
  curl -s https://raw.githubusercontent.com/instant-markdown/vim-instant-markdown/master/ftplugin/markdown/instant-markdown.vim \
    -o "$HOME_DIR/.vim/after/ftplugin/markdown/instant-markdown.vim"

  info "Fetching plug.vim"
  curl -s https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim \
    -o "$HOME_DIR/.vim/autoload/plug.vim"

  warn "Don't forget to run PlugInstall!"
}

install_tmux() {
  create_symlink "$ROOT_DIR/tmux/.tmux.conf" "$HOME_DIR/.tmux.conf"
}

install_all_with_confirmation() {
  [[ $(ask_confirm "bash") == y ]] && install_bash
  [[ $(ask_confirm "git") == y ]] && install_git
  [[ $(ask_confirm "vim") == y ]] && install_vim
  [[ $(ask_confirm "tmux") == y ]] && install_tmux
}

get_choices() {
  cat <<eom
Which configuration do you want to install? (All):
1) All
2) Bash
3) Vim
4) Git
5) Tmux
>
eom
}

main() {
  [[ -z $HOME_DIR ]] && fatal "HOME directory cannot be an empty string"
  [[ $PLATFORM != Linux && $PLATFORM != Darwin ]] && fatal "platform '$PLATFORM' is not supported"

  local command=${1:-}

  case $command in
  install)
    local choice=
    read -r -ep "$(get_choices) " choice

    [[ -z $choice ]] && choice=1

    case $choice in
    1) install_all_with_confirmation ;;
    2) install_bash ;;
    3) install_vim ;;
    4) install_git ;;
    5) install_tmux ;;
    *) fatal "Incorrect configuration number" ;;
    esac
    ;;
  check)
    local cmd="$(get_install_command)"

    [[ -z $cmd ]] && fatal "cannot get install command"

    local libraries=(
      git
      vim
      tmux
      tree
      jq
      rsync
      curl
      source-highlight
      bat
      fzf
    )

    for lib in ${libraries[*]}; do
      if ! is_installed "$lib"; then
        sudo sh -c "$cmd $lib"
      else
        info "$(highlight "$lib") is already installed"
      fi
    done

    warn "make also sure that bash-completion is installed"
    ;;
  *)
    usage
    ;;
  esac
}

main "$@"
