#!/bin/bash

set -e -u -o pipefail
#set -x

declare -a CACHE_NAMES=()
declare -a CACHE_PATHS=()
declare -a CACHE_STATES=()
declare -r SCRIPT=$(basename "$0")

info() {
    echo -e "\x1b[32m\xE2\x87\x92 $1\x1b[0m"
}

error() {
    echo -e "\x1b[97m\x1b[41m\x21 $1\x1b[0m" 1>&2
    exit 1
}

read_help() {
    cat <<eom
Usage: ${SCRIPT} <action> <number>
Examples:
    - ${SCRIPT} list: list the vagrant machines
    - ${SCRIPT} clear: clear the vagrant machines list
    - ${SCRIPT} up 1: launch the machine number 1
    - ${SCRIPT} status: the script will prompt user to get the machine number
eom
}

show_usage() {
    echo -e "$(read_help)" 1>&2
    exit 1
}

clear_machine_list() {
  vagrant global-status --prune
}

get_vm_info() {
    local output=($(vagrant global-status | awk '/virtualbox/{print $2";"$4";"$5"\n"}'))
    local data=()
    local names=
    local paths=

    for line in "${output[@]}"; do
        data=(${line//;/ })
        CACHE_NAMES+=("${data[0]}")
        CACHE_PATHS+=("${data[2]}")
        CACHE_STATES+=("${data[1]}")
    done
}

get_vm_paths() {
    echo "${CACHE_PATHS[@]}"
}

get_vm_names() {
    echo "${CACHE_NAMES[@]}"
}

get_vm_states() {
    echo "${CACHE_STATES[@]}"
}

get_vm_list() {
    local num=0
    local list=
    local paths=($(get_vm_paths))
    local names=($(get_vm_names))
    local states=($(get_vm_states))

    for index in "${!paths[@]}"; do
        num=$((index+1))
        list+="\x1b[32m${num}) \x1b[33m${names[$index]} ${states[$index]}\x1b[32m\x1b[0m ${paths[$index]}\n"
    done

    echo "$list"
}

get_table_headers() {
    echo -e "NUM NAME STATE PATH\n"
}

print_table() {
    (printf "%s%s" "$(get_table_headers)" "$(get_vm_list)") | column -t
}

get_vm_choices() {
    cat <<eom
Which machine do you want to use?:
$(print_table)
>
eom
}

get_vm_path_by_number() {
    local paths=($(get_vm_paths))
    local number=${1:-}
    local index=$((number-1))
    echo ${paths[$index]}
}

get_vm_name_by_number() {
    local names=($(get_vm_names))
    local number=${1:-}
    local index=$((number-1))
    echo ${names[$index]}
}

ask_for_vm_number() {
    local paths=($(get_vm_paths))
    read -erp "$(get_vm_choices) " number
    echo "$number"
}

is_vagrant_machine() {
    local path=${1:-}
    if [[ -d $path && -f "${path}/Vagrantfile" ]]; then return 0; else return 1; fi
}

is_number() {
    if [[ ${1:-} =~ ^[0-9]+$ ]]; then return 0; else return 1; fi
}

main() {
    local action=${1:-}
    local number=${2:-}
    local path=
    local name=

    [[ -z ${action} ]] && show_usage

    get_vm_info

    if [[ $action == list ]]; then
        print_table
    elif [[ $action == clear ]]; then
        clear_machine_list
    else
        [[ ! -z $number ]] || number=$(ask_for_vm_number)

        if ! is_number "$number"; then
            error "Please provide a valid VM number"
        fi

        path=$(get_vm_path_by_number "$number")
        name=$(get_vm_name_by_number "$number")

        if ! is_vagrant_machine "$path"; then
            error "$path does not have Vagrantfile"
        fi

        info "VM: ($name) $path"

        cd "$path"
        vagrant "$action" "$name"
    fi
}

main "$@"
