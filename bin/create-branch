#!/bin/bash
set -e -u -o pipefail
# set -x

declare -r WD="$(pwd -P)"

info() {
    printf "\x1b[32m\xE2\x87\x92 %s\x1b[0m\n" "$1"
}

error() {
    printf "\x1b[97m\x1b[41m\x21\x1b[0m \x1b[31m%s\x1b[0m\n" "$1" 1>&2
    exit 1
}

get_version() {
    local cargo_version="$(get_version_from_cargo)"
    local tags_version="$(get_version_from_git_tags)"
    local composer_version="$(get_version_from_composer)"
    local npm_version="$(get_version_from_npm)"

    [[ -n "$tags_version" ]] && echo "$tags_version"
    [[ -n "$cargo_version" ]] && echo "$cargo_version"
    [[ -n "$composer_version" ]] && echo "$composer_version"
    [[ -n "$npm_version" ]] && echo "$npm_version"
    echo ""
}

get_version_from_cargo() {
    local version
    if [[ -f "$WD/Cargo.toml" ]]; then
        version=$(grep -E "^version" "$WD/Cargo.toml" | grep -Eo "([\.0-9]+)")
        if ! is_semser "$version"; then
            version=
        fi
    fi
    echo "$version"
}

get_version_from_composer() {
    local version
    if [[ -f "$WD/composer.json" ]]; then
        version=$(grep -E "version" "$WD/composer.json" | grep -Eo "([\.0-9]+)")
        if ! is_semser "$version"; then
            version=
        fi
    fi
    echo "$version"
}

get_version_from_npm() {
    local version
    if [[ -f "$WD/package.json" ]]; then
        version=$(grep -E "version" "$WD/package.json" | grep -Eo "([\.0-9]+)")
        if ! is_semser "$version"; then
            version=
        fi
    fi
    echo "$version"
}

get_version_from_git_tags() {
    local version
    if [[ -d "$WD/.git" ]]; then
        local tags=($(git for-each-ref --format='%(*committerdate:raw)%(committerdate:raw) %(refname) %(*objectname) %(objectname)' refs/tags | sort -n | awk '{ print $3; }'))
        if [[ ${#tags[@]} -ne 0 ]]; then
            tag="${tags[*]: -1}"
            version=$(echo "${tag/refs\/tags\//}" | grep -Eo "([\.0-9]+)")
            if ! is_semser "$version"; then
                version=
            fi
        fi
    fi
    echo "$version"
}

get_branch() {
    git branch | grep -E "^\*" | awk '{print $2}'
}

get_next_branch_message() {
    local major=$1
    local minor=$2
    local patch=$3

    cat <<EOM
Which release branch do you want to create? [None]:
1) Major Version (\x1b[33m$major\x1b[0m)
2) Minor Version (\x1b[33m$minor\x1b[0m)
3) Patch Version (\x1b[33m$patch\x1b[0m)
4) Manual entry
>
EOM
}

split_version() {
    local numbers=(${1//./ })
    echo "${numbers[@]:-}"
}

is_semser() {
    local numbers=($(split_version "$1"))
    [[ ${#numbers[@]} -ne 3 ]] && return 1
    return 0
}

get_next_major_version() {
    local numbers=($(split_version "$1"))
    [[ ${#numbers[@]} -eq 3 ]] && echo "$((numbers[0] + 1)).0.0"
}

get_next_minor_version() {
    local numbers=($(split_version "$1"))
    [[ ${#numbers[@]} -eq 3 ]] && echo "${numbers[0]}.$((numbers[1] + 1)).0"
}

get_next_patch_version() {
    local numbers=($(split_version "$1"))
    [[ ${#numbers[@]} -eq 3 ]] && echo "${numbers[0]}.${numbers[1]}.$((numbers[2] + 1))"
}

ask_for_version_number() {
    read -erp "Which version do you want to create?: " number
    echo "$number"
}

create_next_release_branch() {
    local version=$1

    if [[ -n "$version" ]]; then
        local major=$(get_next_major_version "$version")
        local minor=$(get_next_minor_version "$version")
        local patch=$(get_next_patch_version "$version")
        read -erp "$(echo -e "$(get_next_branch_message "$major" "$minor" "$patch")") " next_branch
    else
        next_branch=4
    fi

    local branch_name=
    case $next_branch in
        1) branch_name="$major";;
        2) branch_name="$minor";;
        3) branch_name="$patch";;
        4) branch_name="$(ask_for_version_number)"
    esac

    if [[ -n "$branch_name" ]]; then

        read -erp "$(echo -e "Do you want to create the branch with the name '\x1b[33m${branch_name}\x1b[0m'") [Y/n] " confirm

        [[ -z "$confirm" ]] && confirm="y"

        if [[ "$confirm" == y ]]; then
            git checkout -b "$branch_name"
            git push
        fi
    else
        info "Skipped!"
    fi
}

main() {
    local branch="$(get_branch)"

    [[ ! -d "$WD/.git" ]] && error "Not a git repository"
    [[ "$branch" != master ]] && git checkout master

    create_next_release_branch "$(get_version)"
}

main
