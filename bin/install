#!/bin/bash

set -o nounset
set -o errexit
set -o pipefail
# set -x

declare -r RESET_ALL="\x1b[0m"
declare -r BG_RED="\x1b[41m"
declare -r BG_BLUE="\x1b[44m"
declare -r BG_MAGENTA="\x1b[45m"
declare -r FG_WHITE="\x1b[97m"
declare -r FG_RED="\x1b[31m"
declare -r FG_BLUE="\x1b[34m"
declare -r FG_MAGENTA="\x1b[35m"

error() {
    echo -e "${BG_RED}${FG_WHITE}ERROR${RESET_ALL}  ${FG_RED}$1${RESET_ALL}" >&2
}
info() {
    echo -e "${BG_BLUE}${FG_WHITE}INFO${RESET_ALL}  ${FG_BLUE}$1${RESET_ALL}"
}
warning() {
    echo -e "${BG_MAGENTA}${FG_WHITE}WARNING${RESET_ALL}  ${FG_MAGENTA}$1${RESET_ALL}"
}

declare -r home_dir=${HOME:-}
declare -r df_dir="$(cd "$(dirname "${BASH_SOURCE[0]}")/.." && pwd -P)"

if [[ -z "${home_dir}" ]]; then
    error "HOME directory cannot be an empty string"
    exit 1
fi

create_symlink() {

    local target="$1"
    local symlink="$2"

    if [[ ! -f "${target}" && ! -d "${target}" ]]; then
        error "Target ${target} is neither a file nor a directory"
        exit 1
    fi

    info "Creating symlink ${symlink}"
    ln -fs "${target}" "${symlink}"
}

ask_confirm() {

    local confirm_config=""
    local type_config="$1"

    read -e -p "Do you want install the ${type_config} configuration? [Y/n]: " confirm_config

    # default to yes
    if [[ -z "${confirm_config}" ]]; then
        confirm_config="y"
    fi

    echo ${confirm_config}
}

# Bash configuration
if [[ $(ask_confirm "bash" ) == "y" ]]; then

    # Make a copy of the original bashrc file
    if [[ -f "${home_dir}/.bashrc" && ! -L "${home_dir}/.bashrc" ]]
    then
        mv "${home_dir}/.bashrc" "${home_dir}/.bashrc.orig"
    fi

    # Create bash symlinks
    declare -a files=(.bashrc .bash_prompt .bash_options .bash_export .bash_profile .bash_aliases .bash_functions .dircolors)
    for item in ${files[*]}
    do
        create_symlink "${df_dir}/bash/$item" "${home_dir}/$item"
    done
fi

# Git configuration
if [[ $(ask_confirm "git") == "y" ]]; then

    if [[ ! -f "${home_dir}/git-prompt.sh" ]]
    then
        info "Fetching git-prompt.sh"
        curl -s https://raw.githubusercontent.com/git/git/master/contrib/completion/git-prompt.sh -o "${home_dir}/git-prompt.sh"
    fi
    declare -a files=(.gitconfig .gitignore .gitattributes)
    for item in ${files[*]}
    do
        create_symlink "${df_dir}/git/$item" "${home_dir}/$item"
    done
fi

# Vim configuration
if [[ $(ask_confirm "vim") == "y" ]]; then

    if [[ -d "${home_dir}/.vim" && ! -L "${home_dir}/.vim" ]]
    then
        mv "${home_dir}/.vim" "${home_dir}/.vim.orig"
    fi

    create_symlink "${df_dir}/vim/.vim" "${home_dir}/.vim"
    create_symlink "${df_dir}/vim/.vimrc" "${home_dir}/.vimrc"

    info "Fetching instant-markdown.vim "
    curl -s https://raw.githubusercontent.com/suan/vim-instant-markdown/master/after/ftplugin/markdown/instant-markdown.vim -o "${home_dir}/.vim/after/ftplugin/markdown/instant-markdown.vim"

    info "Fetching plug.vim"
    curl -s https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim -o "${home_dir}/.vim/autoload/plug.vim" 

    warning "Don't forget to run PlugInstall!"
fi

# MySQL configuration
if [[ $(ask_confirm "MySQL") == "y" ]]; then
    create_symlink "${df_dir}/mysql/.my.cnf" "${home_dir}/.my.cnf"
    create_symlink "${df_dir}/grc/.grcat" "${home_dir}/.grcat"
    warning "Don't forget to install grc 'sudo apt-get install -y grc'"
fi

# Terminator configuration
if [[ $(ask_confirm "Terminator") == "y" ]]; then
    if [[ ! -d "${home_dir}/.config/terminator" ]]; then
        mkdir -p "${home_dir}/.config/terminator"
    fi
    create_symlink "${df_dir}/terminator/config" "${home_dir}/.config/terminator/config"
fi

exit 0

