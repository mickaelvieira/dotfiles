#!/bin/bash
get_composer_bin_path() {
    local -r os_type="$(uname -s)"
    local composer_home=
    local composer_bin=

    case "$os_type" in
        Linux)
            composer_home="$HOME/.config/composer"
            ;;
        Darwin)
            composer_home="$HOME/.composer"
            ;;
        *)
          error "Unrecognized OS type: $os_type"
    esac

    # In case the environment variable is defined
    [[ ! -z ${COMPOSER_HOME:-} ]] && composer_home=${COMPOSER_HOME}

    if [[ -d $composer_home ]]; then
        composer_bin="${composer_home}/vendor/bin"
        [[ -d $composer_bin ]] || mkdir -p "$composer_bin"
    fi
    echo "$composer_bin"
}

get_gem_path() {
    local -r ruby_path=$(ruby -e 'print Gem.user_dir')
    local -r gem_bin="${ruby_path}/bin"
    echo "$gem_bin"
}

get_dotfiles_path() {
    local -r this_file=$(readlink "${BASH_SOURCE[0]}")
    local -r df_dir=$(cd "$(dirname "${this_file}")/.." && pwd)
    echo "$df_dir"
}

has_vagrant_user() {
    grep -q '^vagrant:' /etc/passwd && echo true
}

is_vagrant_machine() {
    has_vagrant_user || echo false
}

# Rust cargo path
[[ -d "/usr/local/src/rust/src" ]] && export RUST_SRC_PATH=/usr/local/src/rust/src
[[ -d "$HOME/.cargo/bin" ]] && export PATH="$HOME/.cargo/bin:$PATH"

# Haskell
[[ -d "$HOME/.cabal/bin" ]] && export PATH="$HOME/.cabal/bin:$PATH"

# am I in a vagrant machine?
export IS_VAGRANT=$(is_vagrant_machine)

# Add relevant bin paths
export PATH="$HOME/bin:$(get_dotfiles_path)/bin:$(get_composer_bin_path):$PATH"

if [[ $(uname -s) = Darwin ]]; then
    export CLICOLOR=1
fi

# Ruby Gems path but don't mess up with rvm
[[ -d "$HOME/.rvm/bin" ]] || export PATH="$(get_gem_path):$PATH"

# GO configuration
export GOPATH="$HOME/dev/go"
export PATH="$GOPATH/bin:$PATH"

# Python configuration
export PIP_REQUIRE_VIRTUALENV=true
export PIP_DOWNLOAD_CACHE="$HOME/.pip/cache"

# Javascript configuration
export NODE_ENV="development"

# gohugo configuration
export HUGO_ENV="development"

# Docker configuration
export DOCKER_ID_USER="mickaelvieira"

# Java & Android
export JAVA_HOME="/usr/lib/jvm/default"
export ANDROID_HOME="$HOME/dev/Android/Sdk"
export PATH="${PATH}:${ANDROID_HOME}/platform-tools:${ANDROID_HOME}/emulator:${ANDROID_HOME}/tools:${ANDROID_HOME}/tools/bin"

# JS package managers
[[ -d "$HOME/.nvm" ]] && export NVM_DIR="$HOME/.nvm"
[[ -s "$NVM_DIR/nvm.sh" ]] && . "$NVM_DIR/nvm.sh"
[[ -s "$NVM_DIR/bash_completion" ]] && . "$NVM_DIR/bash_completion"  # This loads nvm bash_completion

[[ -d "$HOME/.yarn" ]] && export PATH="$HOME/.yarn/bin:$PATH"
[[ -d "$HOME/.config/yarn/global/node_modules/.bin" ]] && export PATH="$HOME/.config/yarn/global/node_modules/.bin:$PATH"

# https://wiki.archlinux.org/index.php/Color_output_in_console#less
export LESSOPEN="| /usr/bin/source-highlight-esc.sh %s"
#export LESSOPEN='|/usr/bin/lesspipe.sh %s'
export LESS=' -R '
export LESS_TERMCAP_mb=$'\E[1;31m'
export LESS_TERMCAP_md=$'\E[1;36m'
export LESS_TERMCAP_me=$'\E[0m'
export LESS_TERMCAP_se=$'\E[0m'
export LESS_TERMCAP_so=$'\E[01;44;33m'
export LESS_TERMCAP_ue=$'\E[0m'
export LESS_TERMCAP_us=$'\E[1;32m'

# don't put duplicate lines or lines starting with space in the history.
# See bash(1) for more options
export HISTCONTROL=ignoreboth

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
export HISTSIZE=10000
export HISTFILESIZE=20000

# Change grep matches color
# https://www.gnu.org/software/grep/manual/html_node/Environment-Variables.html
#export GREP_OPTIONS='--color=always'
# export GREP_COLOR='01;31' # Deprecated
export GREP_COLORS='ms=01;31:mc=01;31:sl=:cx=:fn=35:ln=32:bn=32:se=36'

# Default text editor
export EDITOR=/usr/bin/vim

# unstaged (*) and staged (+) changes will be shown next to the branch name
export GIT_PS1_SHOWDIRTYSTATE=1

# If something is stashed, then a '$' will be shown next to the branch name.
# export GIT_PS1_SHOWSTASHSTATE=1

# If there're untracked files, then a '%' will be shown next to the branch name
export GIT_PS1_SHOWUNTRACKEDFILES=1

# "<" indicates you are behind,
# ">" indicates you are ahead,
# "<>" indicates you have diverged
# "=" indicates that there is no difference
export GIT_PS1_SHOWUPSTREAM="auto"
